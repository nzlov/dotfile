" vim-notes
" in command-line mode
" % current filename, %:p current full filename

" =============================== Basic ====================================

" neccesary setup
set nocompatible
syntax enable
set nobackup
set nowritebackup
set noswapfile
set clipboard=unnamed
set lazyredraw
set updatetime=300
set signcolumn=auto:2
set hidden
set shortmess+=c



"
au BufEnter * if &filetype == "" | setlocal ft=conf | endif

" set noerrorbells visualbell t_vb=
" autocmd TabEnter * set visualbell t_vb=

" some command-line mode bindings, use ,: to enter : in command-line
let $BASH_ENV="$HOME/.zshrc"

" some leader bindings
let mapleader="\<Space>"
nnoremap <leader>l gt
nnoremap <leader>h gT
nnoremap <leader>L :bnext<cr> 
nnoremap <leader>H :bprevious<cr>
nnoremap <leader>x :tabclose<cr>
nnoremap <leader>X :bp <BAR> bd #<CR>
nnoremap <leader>w :w<cr>
" nnoremap <leader>q :tabfirst<cr>:tabonly<cr><c-z>
nnoremap <leader>q :qa!<cr>

"nmap <C-n> :cnext<CR>
"nmap <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>
" nnoremap <c-g> :YcmCompleter GoTo<cr>
" nnoremap <c-h> <c-o>
" nnoremap <c-l> <c-i>

" cross display
"au BufEnter * setlocal cursorline cursorcolumn
"au WinLeave * setlocal nocursorline nocursorcolumn
"hi Cursorline cterm=NONE ctermbg=235
"hi Cursorcolumn cterm=NONE ctermbg=235
"au FileType tagbar setlocal nocursorline nocursorcolumn

"status line
"set laststatus=2
"set statusline=
"set statusline+=%1*\ %<\ %F
"set statusline+=%1*\ %m%r 
"set statusline+=%=                                "separator between left and right
"set statusline+=%1*\ %-20((%P)%L\ \ %5l,%-3c%)

" status line and vertical border
set fillchars+=vert:\  "there must be a trailling blank at the end
""hi User1 ctermfg=102 ctermbg=235
"hi VertSplit ctermfg=NONE ctermbg=NONE
"hi StatusLine ctermfg=NONE ctermbg=NONE
"hi StatusLineNC ctermfg=NONE ctermbg=NONE

" tab line
"hi TabLineFill ctermfg=235
"hi TabLine cterm=bold ctermbg=235 ctermfg=30
"hi TabLineSel ctermfg=28

" visual mode
"hi Visual ctermbg=166
"
"" pop-up menu
"hi Pmenu ctermbg=235 ctermfg=173
"hi PmenuSel ctermbg=237 ctermfg=173
"hi PmenuSbar ctermbg=235
"hi PmenuThumb ctermbg=237
"
"" change cursor color in different modes
"let &t_SI="\<Esc>]12;green\x7"
"let &t_EI="\<Esc>]12;purple\x7"

" line number
set relativenumber
set number
set numberwidth=4
set ruler

" tab
set smarttab
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" indent
set smartindent
set autoindent
set backspace=indent,eol,start
set showcmd
set showmode
set showmatch

" search
set incsearch
set hlsearch
nnoremap <leader>ns :nohlsearch<cr>
" nnoremap <leader>cp :TagbarClose<cr>:set nonumber<cr>
" nnoremap <leader>nm :TagbarOpen<cr>:set number<cr>
"set ignorecase
"set smartcase
set isk+=-

" wrap
set wrap
set wrapmargin=0
set linebreak
set nolist
set textwidth=0

" misc
set confirm
set cmdheight=2

" encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8
set scrolloff=3

" bind <esc> to hl in Insert mode and Visual
inoremap <c-c> <esc>
vnoremap <c-c> <esc>

inoremap <c-h> <Left>
inoremap <c-j> <Down>
inoremap <c-k> <Up>
inoremap <c-l> <Right>

" change bindings for moving between windows
nnoremap J  <C-w>j
nnoremap K  <C-w>k
nnoremap H  <C-w>h
nnoremap L  <C-w>l

" =============================== Optional ====================================

" colorscheme ron
" hi Pmenu ctermbg=235 ctermfg=173
" hi Pmenu ctermbg=235 ctermfg=37

" cabbrev ! w<space>!
" nnoremap <leader>q :wqa<cr>

" set colorcolumn=85

" python
" au FileType python setlocal tabstop=4

" fold
" set foldmethod=indent

" unmap <esc> for adapting to hl
" inoremap <esc> <nop>
" vnoremap <esc> <nop>

" =============================== Plugin ====================================

filetype off
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
if has('nvim')
call plug#begin('~/.config/nvim/plugged')
else
call plug#begin('~/.vim/plugged')
endif

" Make sure you use single quotes

" colors
"Plug 'arcticicestudio/nord-vim'
"Plug 'sonph/onehalf', {'rtp': 'vim'}
"Plug 'morhetz/gruvbox'

Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'scrooloose/nerdcommenter'
"Plug 'fatih/vim-go'
"Plug 'majutsushi/tagbar'
"Plug 'valloric/youcompleteme'
"Plug 'mileszs/ack.vim'
"Plug 'rking/ag.vim'
" Plug 'rust-lang/rust.vim'
Plug 'kshenoy/vim-signature'
"Plug 'ternjs/tern_for_vim'
"Plug 'junegunn/fzf'
"Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree',             { 'on': 'UndotreeToggle'   }
Plug 'mhinz/vim-signify'
Plug 'itchyny/lightline.vim'
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-fugitive'
"Plug 'airblade/vim-gitgutter'
"Plug 'bling/vim-bufferline'
"Plug 'w0rp/ale'
"Plug 'terryma/vim-multiple-cursors'
Plug 'easymotion/vim-easymotion'
Plug 'terryma/vim-multiple-cursors'

Plug 'junegunn/goyo.vim'
Plug 'mhinz/vim-startify'

"Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/coc.nvim', { 'branch': 'master', 'do': 'yarn install --frozen-lockfile' }
Plug 'iamcco/dart-vim-plugin'
Plug 'jparise/vim-graphql'
Plug 'luochen1990/rainbow'
"Plug 'liuchengxu/vista.vim'

call plug#end()
filetype on

" =============================== Colors ====================================
if !exists("g:gui_oni")
  if $COLORTERM == 'truecolor'
      set termguicolors
  else
      if !has("nvim")
          set term=xterm
          set t_Co=256
      endif
  endif
endif

let hour = strftime("%H")
set background=dark
if hour < 17
    if hour > 6
        set background=light
    endif
endif

"colorscheme solarized8
"colorscheme solarized8_flat
colorscheme lucario
"colorscheme nord
"colorscheme onehalflight
"colorscheme onehalfdark
"colorscheme PaperColor
"colorscheme gruvbox



" =============================== Plugin ====================================

filetype plugin on

" nerdtree
let NERDTreeWinPos=0
" nerdtree-tabs
map <leader>n <plug>NERDTreeTabsToggle<cr>

" nerdcommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" emmet
" let g:user_emmet_leader_key='<leader>t'


" rainbow
let g:rainbow_active = 1

" auto-pairs
let g:AutoPairsCenterLine=0

" autoformat
" let g:formatters_go = ['goimports']
" let g:autoformat_verbosemode=1
" au BufWrite *.go :Autoformat


"" tagbar
"let g:tagbar_left=1
"let g:tagbar_iconchars=['▸', '▾']
"let g:tagbar_width = max([40, winwidth(0) / 5])
"" let g:tagbar_show_tag_linenumbers = 2
"" let g:tagbar_autopreview = 1
""let g:tagbar_autopreview = 1
"" au FileType go nested :TagbarOpen
"let g:tagbar_scopestrs = {
"    \    'class': "\uf0e8",
"    \    'const': "\uf8ff",
"    \    'constant': "\uf8ff",
"    \    'enum': "\uf702",
"    \    'field': "\uf30b",
"    \    'func': "\uf794",
"    \    'function': "\uf794",
"    \    'getter': "\ufab6",
"    \    'implementation': "\uf776",
"    \    'interface': "\uf7fe",
"    \    'map': "\ufb44",
"    \    'member': "\uf02b",
"    \    'method': "\uf6a6",
"    \    'setter': "\uf7a9",
"    \    'variable': "\uf71b",
"    \ }
"let g:tagbar_type_go = {
"	\ 'ctagstype' : 'go',
"	\ 'kinds'     : [
"		\ 'p:package',
"		\ 'i:imports:1',
"		\ 'c:constants',
"		\ 'v:variables',
"		\ 't:types',
"		\ 'n:interfaces',
"		\ 'w:fields',
"		\ 'e:embedded',
"		\ 'm:methods',
"		\ 'r:constructor',
"		\ 'f:functions'
"	\ ],
"	\ 'sro' : '.',
"	\ 'kind2scope' : {
"		\ 't' : 'ctype',
"		\ 'n' : 'ntype'
"	\ },
"	\ 'scope2kind' : {
"		\ 'ctype' : 't',
"		\ 'ntype' : 'n'
"	\ },
"	\ 'ctagsbin'  : 'gotags',
"	\ 'ctagsargs' : '-sort -silent'
"    \ }

" ycm
"set completeopt -=preview
"set completeopt=longest,menu
"let g:ycm_collect_identifiers_from_comments_and_strings=1
"let g:ycm_goto_buffer_command='new-or-existing-tab'

" ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsExpandTrigger = "<Plug>(ultisnips_expand)"

" ag
let g:ag_working_path_mode='r'

"" airline
"let g:airline#extensions#tabline#buffer_nr_show = 1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#ale#enabled = 1
"let g:airline_solarized_bg='dark'
"let g:airline_powerline_fonts = 1
"let g:airline_solarized_bg='light'
"let g:airline_theme='solarized'
"let g:airline_theme='onehalflight'
"let g:airline_theme='onehalfdark'
"let g:airline_theme='papercolor'

"==========================   lightline   ==================================
function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'currentfunction',  'filename' ]],
      \   'right': [[ 'syntastic', 'lineinfo' ], ['percent'], [ 'fugitive','fileformat', 'fileencoding', 'filetype' ]]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status',
      \   'currentfunction': 'CocCurrentFunction',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
	  \   'filetype': 'LightlineFiletype',
	  \   'fileencoding': 'LightlineFileencoding',
      \ },
      \ }


function! LightlineModified()
    return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction
function! LightlineReadonly()
    return &ft !~? 'help\|vimfiler' && &readonly ? 'RO' : ''
endfunction
function! LightlineFilename()
    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
		\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
		\  &ft == 'unite' ? unite#get_status_string() :
		\  &ft == 'vimshell' ? vimshell#get_status_string() :
		\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
		\ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction
function! LightlineFugitive()
    if &ft !~? 'vimfiler' && exists('*fugitive#head')
        return fugitive#head()
	endif
	return ''
endfunction

function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
	return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction
"==========================   vim-easymotion   ==================================
" <Leader>s{char} to move to {char}
map  s <Plug>(easymotion-bd-f)
nmap s <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap <Leader>s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>W <Plug>(easymotion-bd-w)
nmap <Leader>W <Plug>(easymotion-overwin-w)

"==========================   Goyo  =================================================
let g:goyo_width="55%"
let g:goyo_height="100%"
nnoremap <leader>g :Goyo<cr>

function! s:goyo_enter()
   set relativenumber
   set number
endfunction

function! s:goyo_leave()
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

"==========================   Coc  =================================================
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-o> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif


" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use KK to show documentation in preview window
nnoremap <silent> KK :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>d  :<C-u>CocList --auto-preview diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList --auto-preview outline<cr>
" Search workspace symbols
nnoremap <silent> <space>i  :<C-u>CocList --auto-preview -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Show files
nnoremap <silent> <space>p  :<C-u>CocList files<CR>
" Resume latest coc list
nnoremap <silent> <space>r  :<C-u>CocListResume<CR>

" grep word under cursor
command! -nargs=+ -complete=custom,s:GrepArgs Rg exe 'CocList grep '.<q-args>

function! s:GrepArgs(...)
  let list = ['-S', '-smartcase', '-i', '-ignorecase', '-w', '-word',
        \ '-e', '-regex', '-u', '-skip-vcs-ignores', '-t', '-extension']
  return join(list, "\n")
endfunction

" Keymapping for grep word under cursor with interactive mode
nnoremap <silent> <Leader>cf :exe 'CocList --auto-preview -I --input='.expand('<cword>').' grep'<CR>

"==================================== vim-multiple-cursors ===========================

let g:multi_cursor_exit_from_visual_mode = 1
let g:multi_cursor_exit_from_insert_mode = 1

"==================================== ultisnips ===========================
" c-j c-k for moving in snippet

"inoremap <silent> <expr> <CR> ((pumvisible() && empty(v:completed_item)) ?  "\<c-y>\<cr>" : (!empty(v:completed_item) ? ncm2_ultisnips#expand_or("", 'n') : "\<CR>" ))

" c-j c-k for moving in snippet
imap <expr> <c-u> ncm2_ultisnips#expand_or("\<Plug>(ultisnips_expand)", 'm')
smap <c-u> <Plug>(ultisnips_expand)
let g:UltiSnipsExpandTrigger		= "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpForwardTrigger	= "<c-j>"
let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"
let g:UltiSnipsRemoveSelectModeMappings = 0

" ----------------------------------------------------------------------------
" undotree
" ----------------------------------------------------------------------------
let g:undotree_WindowLayout = 2
nnoremap U :UndotreeToggle<CR>

" ============================ Language Specific ==============================


" go
augroup go
  autocmd!
  au BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
"  au InsertLeave *.go nested :GoBuild!<cr>
augroup END

" sh
augroup sh
  autocmd!
  au BufRead *.sh nnoremap <leader>r :w !bash %<cr>
augroup END

" html
augroup html
  autocmd!
"  au BufWritePre *.html call Format("html")
augroup END

" css
augroup css
  autocmd!
" au BufWritePre *.css call Format("css")
augroup END

" c
augroup c
  autocmd!
  au BufRead *.c nnoremap <leader>r :w !gcc % -o /tmp/c-compiled-random-string && /tmp/c-compiled-random-string<cr>
  au BufRead *.c setlocal expandtab
augroup END

" python
augroup python
  autocmd!
  au FileType python setlocal expandtab
  au FileType python setlocal ts=4 sw=4 sts=4
augroup END
